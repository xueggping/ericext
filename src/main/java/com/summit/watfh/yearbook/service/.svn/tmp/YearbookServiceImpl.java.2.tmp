package com.summit.watfh.yearbook.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

<<<<<<< .mine
import net.sf.json.JSONObject;
import net.sourceforge.jtds.jdbc.DateTime;

=======
import org.apache.commons.lang3.StringUtils;
>>>>>>> .r102483
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.servlet.ModelAndView;

import com.summit.common.tbOperate.service.TbCommonInter;
import com.summit.frame.repository.jdbc.UserRepository;
<<<<<<< .mine
import com.summit.util.CommonUtil;
=======
import com.summit.frame.util.SummitTools;
>>>>>>> .r102483
import com.summit.watfh.yearbook.bean.Yearbook;

import net.sf.json.JSONObject;

@Service
@Transactional
public class YearbookServiceImpl implements YearbookServiceInter{

	@Autowired
	private UserRepository ur;
	@Autowired
	private TbCommonInter tbCommonService;
	@Autowired
	private SummitTools tool;
	
	public ModelAndView getFirstPage(Yearbook yearbook) {
		yearbook = new Yearbook("00100100","00100100,00100350", "2010-10-10 08:00:00", "2010-10-10 08:00:00", "2010", 1);
		String stcds = "'" + yearbook.getStcds().replace(",", "','") + "'";
		String stcd = "'"+yearbook.getStcd()+"'";
//		String startTime = "2010-10-10 08:00:00";
//		String endTime = "2015-10-10 08:00:00";
		String sql = "exec UP_Get_DAT_C_By_Stations ?,?,?";
		int[][] name = null;
		switch (yearbook.getBookType()) {
		case 1://单站多年
			//组织数据
			List<Map<String, Object>> x = ur.jdbcTemplate.queryForList(sql,stcd,yearbook.getStartTime(),yearbook.getEndTime());
			name = new int[31][12];
	        for(int i = 0; i < 31; i++){
	        	for (int j = 0; j < 12; j++) {
	        		name[i][j] = i+j;
				}
	        }
			break;
		case 2://多站单年
			//组织数据
			List<JSONObject> jx = ur.queryAllCustom(sql,stcds,yearbook.getYear(),yearbook.getYear());
			name = new int[31][12];
	        for(int i = 0; i < 31; i++){
	        	for (int j = 0; j < 12; j++) {
	        		name[i][j] = i+j;
				}
	        }
			break;
		default:
			break;
		}
		ModelAndView mv = new ModelAndView("yearbook/testTemplates");  
        mv.addObject("name", name);  
        return mv; 
	}
	
	@Override
	public List<Map<String,Object>> avgFlowReport(String stcds, String beginYear, String endYear, String type) throws Exception {
		stcds="'00100100'";
		beginYear = "2007";
		endYear = "2017";
		String sql = "exec UP_Get_DQ_C_By_Stations ?,?,?";
		List<Map<String, Object>> dailyList = ur.jdbcTemplate.queryForList(sql, stcds, beginYear, endYear);//日流量
		List<Map<String, Object>> monthAvglist = ur.jdbcTemplate.queryForList("exec UP_Get_MTQ_E_By_Stations ?,?,?", stcds, beginYear, endYear);//月流量
		List<Map<String, Object>> yearList = ur.jdbcTemplate.queryForList("exec UP_Get_YRQ_F_By_Stations ?,?,?", stcds, beginYear, endYear);//年流量
		List<JSONObject> timeMaxList = tbCommonService.queryDatasByTbName("HY_IMXFW_F", "{'STCD_IN':'00100100','YR_DT':'2007','YR_LT':'2014'}");//时段最大洪量
	    List<JSONObject> remarkList = tbCommonService.queryDatasByTbName("HY_DAEX_I", "{'STCD_IN':'00100100','YR_DT':'2007','YR_LT':'2014','TBID_EQ':'HY_DQ_C'}");
		
		List<Map<String,Object>> dataList = avgFlowData(dailyList, yearList, monthAvglist, timeMaxList,remarkList, type);
	    
	    
		return dataList;
	}
	
	private List<Map<String,Object>> avgFlowData(List<Map<String, Object>> dailyList,List<Map<String, Object>> yearList,
			List<Map<String, Object>> monthAvglist,List<JSONObject> timeMaxList,List<JSONObject> remarkList,String type){
		List<Map<String,Object>> dataList = new ArrayList<Map<String, Object>>();
		Map<String,Map<String,Object>> dataMap = new HashMap<String, Map<String, Object>>();
		
		if(tool.collectionNotNull(dailyList)){
			if("1".equals(type))
			{
				//单站多年
				for(Map<String, Object> on:dailyList){
					String dt = on.containsKey("AVQ")?on.get("DT").toString():null;
					String stcd = on.containsKey("STCD")?on.get("STCD").toString():null;
					String avq = on.containsKey("AVQ")?on.get("AVQ").toString():null;
					String year = dt.substring(0, 4);//年份
					String month = dt.substring(5,7);//月份
					String day = dt.substring(8, 10);//日期
					int m = Integer.parseInt(month);
					int d = Integer.parseInt(day);
					
					if(dataMap.containsKey(year)){
						Map map = dataMap.get(year);
						if(map.containsKey("tableData"))
						{
							String[][] tableData = (String[][]) map.get("tableData");
							tableData[d-1][m-1] = avq;
						}
						else
						{
							String[][] tableData = new String[36][12];
							tableData[d-1][m-1] = avq;
							map.put("tableData", tableData);
						}
					}
					else
					{
						Map<String, Object> map = new HashMap<String,Object>();
						String RVNM = on.containsKey("RVNM")?on.get("RVNM").toString():null;
						String STNM = on.containsKey("STNM")?on.get("STNM").toString():null;
						map.put("STCD", stcd);
						map.put("RVNM", RVNM);
						map.put("STNM", STNM);
						map.put("YEAR", year);
						map.put("MONTH", m);
						
						String[][] tableData = new String[36][12];
						tableData[d-1][m-1] = avq;
						map.put("tableData", tableData);
						
						dataMap.put(year, map);
					}
				}
				
			}
			else if("2".equals(type))
			{
				//单年多站
				for(Map<String,Object> on:dailyList){
					String dt = on.containsKey("DT")?on.get("DT").toString():null;
					String stcd = on.containsKey("STCD")?on.get("STCD").toString():null;
					String avq = on.containsKey("AVQ")?on.get("AVQ").toString():null;
					
					String year = dt.substring(0, 4);//年份
					String month = dt.substring(5,7);//月份
					String day = dt.substring(8, 10);//日期
					
					int m = Integer.parseInt(month);
					int d = Integer.parseInt(day);
					
					if(dataMap.containsKey(stcd)){
						Map map = dataMap.get(stcd);
						if(map.containsKey("tableData"))
						{
							String[][] tableData = (String[][]) map.get("tableData");
							tableData[d-1][m-1] = avq;
						}
						else
						{
							String[][] tableData = new String[36][12];
							tableData[d-1][m-1] = avq;
							map.put("tableData", tableData);
						}
					}
					else
					{
						Map<String, Object> map = new HashMap<String,Object>();
						String RVNM = on.containsKey("RVNM")?on.get("RVNM").toString():null;
						String STNM = on.containsKey("STNM")?on.get("STNM").toString():null;
						map.put("STCD", stcd);
						map.put("STNM", STNM);
						map.put("YEAR", year);
						map.put("RVNM", RVNM);
						map.put("MONTH", m);
						
						String[][] tableData = new String[36][12];
						tableData[d-1][m-1] = avq;
						map.put("tableData", tableData);
						
						dataMap.put(stcd, map);
					}
				}
			}
		}
		
		for(Entry<String, Map<String, Object>> entry : dataMap.entrySet())
		{
				Map<String,Object> map = entry.getValue();
				String perStcd = map.containsKey("STCD")?map.get("STCD").toString():null;
				String perYear = map.containsKey("YEAR")?map.get("YEAR").toString():null;
				
				for(Map<String,Object> mavg:monthAvglist){
					String stcd = mavg.containsKey("STCD")?mavg.get("STCD").toString():"";
					String yr = mavg.containsKey("YR")?mavg.get("YR").toString():"";
					int mth = mavg.containsKey("MTH")?Integer.parseInt(mavg.get("MTH").toString()):null;
					String avq = mavg.containsKey("AVQ")?mavg.get("AVQ").toString():"";
					String mxq = mavg.containsKey("MXQ")?mavg.get("MXQ").toString():"";
					String mxqdt = mavg.containsKey("MXQDT")?subDateStr1(mavg.get("MXQDT").toString()):"";
					String mnq = mavg.containsKey("MNQ")?mavg.get("MNQ").toString():"";
					String mnqdt = mavg.containsKey("MNQDT")?subDateStr1(mavg.get("MNQDT").toString()):"";
					if(stcd.equals(map.get("STCD").toString()) && yr.equals(map.get("YEAR").toString())){
						String[][] tdata = (String[][]) map.get("tableData");
						tdata[31][mth-1] = avq;
						tdata[32][mth-1] = mxq;
						tdata[33][mth-1] = mxqdt;
						tdata[34][mth-1] = mnq;
						tdata[35][mth-1] = mnqdt;
					}
				}
				
				for(JSONObject maxhf:timeMaxList){
					String stcd = maxhf.containsKey("STCD")?maxhf.getString("STCD"):"";
					String yr = maxhf.containsKey("YR")?maxhf.getString("YR"):"";
					String mxw = maxhf.containsKey("MXW")?maxhf.getString("MXW"):"";//最大洪量
					String mxwdr = maxhf.containsKey("MXWDR")?maxhf.getString("MXWDR"):"";//最大洪量时段长
					String bgdt = maxhf.containsKey("BGDT")?maxhf.getString("BGDT"):"";//起始日期
					
					if(stcd.equals(perStcd) && yr.equals(perYear))
					{
						map.put("MXWDR"+mxwdr, mxw);
						map.put("BGDT"+mxwdr, bgdt);
					}
				}
				
				for(Map<String,Object> obj:yearList){
					String stcd = obj.containsKey("STCD")?obj.get("STCD").toString():null;
					String yr = obj.containsKey("YR")?obj.get("YR").toString():null;
					String avq = obj.containsKey("AVQ")?obj.get("AVQ").toString():null;//平均流量
					String mxq = obj.containsKey("MXQ")?obj.get("MXQ").toString():null;//最大流量
					String mxqdt = obj.containsKey("MXQDT")?subDatestr(obj.get("MXQDT").toString()):null;//最大流量日期
					String mnq = obj.containsKey("MNQ")?obj.get("MNQ").toString():null;//最小流量
					String mnqdt = obj.containsKey("MNQDT")?subDatestr(obj.get("MNQDT").toString()):null;//最小流量日期
					String rw = obj.containsKey("RW")?obj.get("RW").toString():null;//径流量
					String rm = obj.containsKey("RM")?obj.get("RM").toString():null;//径流模数
					String rd = obj.containsKey("RD")?obj.get("RD").toString():null;//径流深度
					
					if(stcd.equals(perStcd) && yr.equals(perYear)){
						map.put("AVQ", avq);
						map.put("MXQ", mxq);
						map.put("MXQDT", mxqdt!=null?subDatestr(mxqdt):null);
						map.put("MNQ", mnq);
						map.put("MNQDT", mnqdt);
						map.put("RW", rw);
						map.put("RM", rm);
						map.put("RD", rd);
					}
				}
				
				for(JSONObject obj:remarkList){
					String stcd = obj.containsKey("STCD")?obj.getString("STCD").toString():null;
					String yr = obj.containsKey("YR")?obj.getString("YR").toString():null;
					String nt = obj.containsKey("NT")?obj.getString("NT").toString():null;
					if(stcd.equals(perStcd) && yr.equals(perYear)){
						map.put("NT", nt);
					}
				}
				
				dataList.add(dataMap.get(entry.getKey()));
			}
		return dataList;
	
	}
	
	private String subDatestr(String dateStr){
		if(StringUtils.isNotBlank(dateStr) && dateStr.length()>=10){
			int d1 = Integer.parseInt(dateStr.substring(5, 7));
			int d2 = Integer.parseInt(dateStr.substring(8, 10));
			return d1+"月"+d2+"日";
			
		}
		else
		{
			return dateStr;
		}
	}
	
	private String subDateStr1(String dateStr){
		if(StringUtils.isNotBlank(dateStr) && dateStr.length()>=10){
			int d2 = Integer.parseInt(dateStr.substring(8, 10));
			return d2+"";
		}
		return "";
	}

<<<<<<< .mine
	
	public ModelAndView floodReport(Yearbook yearbook) {
		yearbook = new Yearbook("00100100","00100100,00100350", "2010-10-10 08:00:00", "2010-10-10 08:00:00", "2010", 1);
		String stcds = "'" + yearbook.getStcds().replace(",", "','") + "'";
		String stcd = "'"+yearbook.getStcd()+"'";
		String sql = "exec UP_Get_FDHEEX_B_By_Stations_Year ?, ?";
		JSONObject res = new JSONObject();
		switch (yearbook.getBookType()) {
		case 1:
			List<JSONObject> jx = ur.queryAllCustom(sql,stcd,yearbook.getYear());
			double num2 = (double)(jx.size() / 4);
			int num3 = (int)num2;
			if (jx.size() % 4 > 0)
			{
				num3++;
			}
			res.put("rows", num3);
			String[][] data = new String[num3][20]; 
			int num4 = 0;
			int num5 = 0;
			String b = "";
			String b2 = "";
			String text2 = "";
			for (int k = 0; k < jx.size()-1; k++)
			{
				if (k % num3 == 0 && k != 0)
				{
					num4 = 0;
					num5++;
				}
				int num6 = 0;
				num4++;
				String text3 = String.valueOf(Integer.parseInt(CommonUtil.padWhitespaceLeft(jx.get(k).getString("TM").substring(5,7), 2)));
				String text4 = String.valueOf(Integer.parseInt(CommonUtil.padWhitespaceLeft(jx.get(k).getString("TM").substring(8,10), 2)));;
				String text5 = String.format("%.2f",jx.get(k).getDouble("Z"));
				if (k == 0)
				{
					b = text3;
					b2 = text4;
					text2 = text5;
				}
				else
				{
					if (text2.equals(text5.trim()))
					{
						text5 = "&nbsp;";
					}
					else
					{
						String[] array = text2.split("\\.");
						text2 = text5;
						if (text5.startsWith(array[0]))
						{
							text5 = text5.replace(String.format("%s.", array[0]), "");
							text5 = CommonUtil.padWhitespaceLeft(text5, text5.length() + 1 + array[0].length() + 1);
							text5 = text5.replace(" ", "&nbsp;");
						}
					}
					if (b.equals(text3.trim()))
					{
						text3 = "&nbsp;";
					}
					else
					{
						b = text3;
					}
					if (b2.equals(text4.trim()))
					{
						text4 = "&nbsp;";
					}
					else
					{
						b2 = text4;
					}
				}
				String text6 = jx.get(k).getString("TM").substring(11,16).replace(":00", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (text6.startsWith("0"))
				{
					text6 = "&nbsp;" + text6.substring(1);
				}
				data[num4-1][num5 * 5 + num6++] = text3;
				data[num4-1][num5 * 5 + num6++] = text4;
				data[num4-1][num5 * 5 + num6++] = text6;
				data[num4-1][num5 * 5 + num6++] = text5;
				String[] array2 = String.valueOf(jx.get(k).getDouble("Q")).split("\\.");
				array2[0] = CommonUtil.padWhitespaceLeft(array2[0], 5).replace(" ", "&nbsp; ");
				String arg = "";
				String text7 = "";
				if (array2.length == 1)
				{
					text7 = text7 + array2[0] + "&nbsp;&nbsp; &nbsp; &nbsp; ";
				}
				else
				{
					arg = CommonUtil.padWhitespaceRight(array2[1], 3).replace(" ", "&nbsp;");
					text7 += String.format("%s.%s", array2[0], arg);
				}
				data[num4-1][num5 * 5 + num6++] = text7;
			}
			res.put("data", data);
			break;
		case 2:
			break;
		default:
			break;
		}
		ModelAndView mv = new ModelAndView("yearbook/FloodReport");  
        mv.addObject("res", res);  
        return mv; 
	}
	
	public static void main(String[] args) {
//		String  x = "2010-07-29 20:00:00.000";
//		System.out.println("1~" +x.substring(5,7));
//		System.out.println("2~" +x.substring(8,10));
//		System.out.println("3~" +x.substring(11,16));
		System.out.println(String.format("%.2f",5.2));
//		String[] x = String.valueOf(6.39).split("\\.");
//		System.out.println(x.length);;
	}

}
=======
}>>>>>>> .r102483
