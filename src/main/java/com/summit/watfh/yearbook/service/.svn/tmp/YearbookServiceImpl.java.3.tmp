package com.summit.watfh.yearbook.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.servlet.ModelAndView;

import com.summit.common.tbOperate.service.TbCommonInter;
import com.summit.frame.repository.jdbc.UserRepository;
import com.summit.frame.util.SummitTools;
import com.summit.watfh.yearbook.bean.Yearbook;

import net.sf.json.JSONObject;

@Service
@Transactional
public class YearbookServiceImpl implements YearbookServiceInter{

	@Autowired
	private UserRepository ur;
	@Autowired
	private TbCommonInter tbCommonService;
	@Autowired
	private SummitTools tool;
	
	public ModelAndView getFirstPage(Yearbook yearbook) {
		yearbook = new Yearbook("00100100","00100100,00100350", "2010-10-10 08:00:00", "2010-10-10 08:00:00", "2010", 1);
		String stcds = "'" + yearbook.getStcds().replace(",", "','") + "'";
		String stcd = "'"+yearbook.getStcd()+"'";
//		String startTime = "2010-10-10 08:00:00";
//		String endTime = "2015-10-10 08:00:00";
		String sql = "exec UP_Get_DAT_C_By_Stations ?,?,?";
		int[][] name = null;
		switch (yearbook.getBookType()) {
		case 1://单站多年
			//组织数据
			List<Map<String, Object>> x = ur.jdbcTemplate.queryForList(sql,stcd,yearbook.getStartTime(),yearbook.getEndTime());
			name = new int[31][12];
	        for(int i = 0; i < 31; i++){
	        	for (int j = 0; j < 12; j++) {
	        		name[i][j] = i+j;
				}
	        }
			break;
		case 2://多站单年
			//组织数据
			List<JSONObject> jx = ur.queryAllCustom(sql,stcds,yearbook.getYear(),yearbook.getYear());
			name = new int[31][12];
	        for(int i = 0; i < 31; i++){
	        	for (int j = 0; j < 12; j++) {
	        		name[i][j] = i+j;
				}
	        }
			break;
		default:
			break;
		}
		ModelAndView mv = new ModelAndView("yearbook/testTemplates");  
        mv.addObject("name", name);  
        return mv; 
	}
	
	public List<Map<String,Object>> avgFlowReport(String stcds, String beginYear, String endYear, String type) throws Exception {
		stcds="'00100100'";
		beginYear = "2007";
		endYear = "2017";
		String sql = "exec UP_Get_DQ_C_By_Stations ?,?,?";
		List<Map<String, Object>> dailyList = ur.jdbcTemplate.queryForList(sql, stcds, beginYear, endYear);//日流量
		List<Map<String, Object>> monthAvglist = ur.jdbcTemplate.queryForList("exec UP_Get_MTQ_E_By_Stations ?,?,?", stcds, beginYear, endYear);//月流量
		List<Map<String, Object>> yearList = ur.jdbcTemplate.queryForList("exec UP_Get_YRQ_F_By_Stations ?,?,?", stcds, beginYear, endYear);//年流量
		List<JSONObject> timeMaxList = tbCommonService.queryDatasByTbName("HY_IMXFW_F", "{'STCD_IN':'00100100','YR_DT':'2007','YR_LT':'2014'}");//时段最大洪量
	    List<JSONObject> remarkList = tbCommonService.queryDatasByTbName("HY_DAEX_I", "{'STCD_IN':'00100100','YR_DT':'2007','YR_LT':'2014','TBID_EQ':'HY_DQ_C'}");
		
		List<Map<String,Object>> dataList = avgFlowData(dailyList, yearList, monthAvglist, timeMaxList,remarkList, type);
	    
		return dataList;
	}
	
	private List<Map<String,Object>> avgFlowData(List<Map<String, Object>> dailyList,List<Map<String, Object>> yearList,
			List<Map<String, Object>> monthAvglist,List<JSONObject> timeMaxList,List<JSONObject> remarkList,String type){
		List<Map<String,Object>> dataList = new ArrayList<Map<String, Object>>();
		Map<String,Map<String,Object>> dataMap = new HashMap<String, Map<String, Object>>();
		
		if(tool.collectionNotNull(dailyList)){
			if("1".equals(type))
			{
				//单站多年
				for(Map<String, Object> on:dailyList){
					String dt = on.containsKey("AVQ")?on.get("DT").toString():null;
					String stcd = on.containsKey("STCD")?on.get("STCD").toString():null;
					String avq = on.containsKey("AVQ")?on.get("AVQ").toString():null;
					String year = dt.substring(0, 4);//年份
					String month = dt.substring(5,7);//月份
					String day = dt.substring(8, 10);//日期
					int m = Integer.parseInt(month);
					int d = Integer.parseInt(day);
					
					if(dataMap.containsKey(year)){
						Map map = dataMap.get(year);
						if(map.containsKey("tableData"))
						{
							String[][] tableData = (String[][]) map.get("tableData");
							tableData[d-1][m-1] = avq;
						}
						else
						{
							String[][] tableData = new String[36][12];
							tableData[d-1][m-1] = avq;
							map.put("tableData", tableData);
						}
					}
					else
					{
						Map<String, Object> map = new HashMap<String,Object>();
						String RVNM = on.containsKey("RVNM")?on.get("RVNM").toString():null;
						String STNM = on.containsKey("STNM")?on.get("STNM").toString():null;
						map.put("STCD", stcd);
						map.put("RVNM", RVNM);
						map.put("STNM", STNM);
						map.put("YEAR", year);
//						map.put("MONTH", m);
						
						String[][] tableData = new String[36][12];
						tableData[d-1][m-1] = avq;
						map.put("tableData", tableData);
						
						dataMap.put(year, map);
					}
				}
				
			}
			else if("2".equals(type))
			{
				//单年多站
				for(Map<String,Object> on:dailyList){
					String dt = on.containsKey("DT")?on.get("DT").toString():null;
					String stcd = on.containsKey("STCD")?on.get("STCD").toString():null;
					String avq = on.containsKey("AVQ")?on.get("AVQ").toString():null;
					
					String year = dt.substring(0, 4);//年份
					String month = dt.substring(5,7);//月份
					String day = dt.substring(8, 10);//日期
					
					int m = Integer.parseInt(month);
					int d = Integer.parseInt(day);
					
					if(dataMap.containsKey(stcd)){
						Map map = dataMap.get(stcd);
						if(map.containsKey("tableData"))
						{
							String[][] tableData = (String[][]) map.get("tableData");
							tableData[d-1][m-1] = avq;
						}
						else
						{
							String[][] tableData = new String[36][12];
							tableData[d-1][m-1] = avq;
							map.put("tableData", tableData);
						}
					}
					else
					{
						Map<String, Object> map = new HashMap<String,Object>();
						String RVNM = on.containsKey("RVNM")?on.get("RVNM").toString():null;
						String STNM = on.containsKey("STNM")?on.get("STNM").toString():null;
						map.put("STCD", stcd);
						map.put("STNM", STNM);
						map.put("YEAR", year);
						map.put("RVNM", RVNM);
//						map.put("MONTH", m);
						
						String[][] tableData = new String[36][12];
						tableData[d-1][m-1] = avq;
						map.put("tableData", tableData);
						
						dataMap.put(stcd, map);
					}
				}
			}
		}
		
		for(Entry<String, Map<String, Object>> entry : dataMap.entrySet())
		{
				Map<String,Object> map = entry.getValue();
				String perStcd = map.containsKey("STCD")?map.get("STCD").toString():null;
				String perYear = map.containsKey("YEAR")?map.get("YEAR").toString():null;
				
				for(Map<String,Object> mavg:monthAvglist){
					String stcd = mavg.containsKey("STCD")?mavg.get("STCD").toString():"";
					String yr = mavg.containsKey("YR")?mavg.get("YR").toString():"";
					int mth = mavg.containsKey("MTH")?Integer.parseInt(mavg.get("MTH").toString()):null;
					String avq = mavg.containsKey("AVQ")?mavg.get("AVQ").toString():"";
					String mxq = mavg.containsKey("MXQ")?mavg.get("MXQ").toString():"";
					String mxqdt = mavg.containsKey("MXQDT")?subDateStr1(mavg.get("MXQDT").toString()):"";
					String mnq = mavg.containsKey("MNQ")?mavg.get("MNQ").toString():"";
					String mnqdt = mavg.containsKey("MNQDT")?subDateStr1(mavg.get("MNQDT").toString()):"";
					if(stcd.equals(map.get("STCD").toString()) && yr.equals(map.get("YEAR").toString())){
						String[][] tdata = (String[][]) map.get("tableData");
						tdata[31][mth-1] = avq;
						tdata[32][mth-1] = mxq;
						tdata[33][mth-1] = mxqdt;
						tdata[34][mth-1] = mnq;
						tdata[35][mth-1] = mnqdt;
					}
				}
				
				for(JSONObject maxhf:timeMaxList){
					String stcd = maxhf.containsKey("STCD")?maxhf.getString("STCD"):"";
					String yr = maxhf.containsKey("YR")?maxhf.getString("YR"):"";
					String mxw = maxhf.containsKey("MXW")?maxhf.getString("MXW"):"";//最大洪量
					String mxwdr = maxhf.containsKey("MXWDR")?maxhf.getString("MXWDR"):"";//最大洪量时段长
					String bgdt = maxhf.containsKey("BGDT")?maxhf.getString("BGDT"):"";//起始日期
					
					if(stcd.equals(perStcd) && yr.equals(perYear))
					{
						map.put("MXWDR"+mxwdr, mxw);
						map.put("BGDT"+mxwdr, bgdt);
					}
				}
				
				for(Map<String,Object> obj:yearList){
					String stcd = obj.containsKey("STCD")?obj.get("STCD").toString():null;
					String yr = obj.containsKey("YR")?obj.get("YR").toString():null;
					String avq = obj.containsKey("AVQ")?obj.get("AVQ").toString():null;//平均流量
					String mxq = obj.containsKey("MXQ")?obj.get("MXQ").toString():null;//最大流量
					String mxqdt = obj.containsKey("MXQDT")?subDatestr(obj.get("MXQDT").toString()):null;//最大流量日期
					String mnq = obj.containsKey("MNQ")?obj.get("MNQ").toString():null;//最小流量
					String mnqdt = obj.containsKey("MNQDT")?subDatestr(obj.get("MNQDT").toString()):null;//最小流量日期
					String rw = obj.containsKey("RW")?obj.get("RW").toString():null;//径流量
					String rm = obj.containsKey("RM")?obj.get("RM").toString():null;//径流模数
					String rd = obj.containsKey("RD")?obj.get("RD").toString():null;//径流深度
					
					if(stcd.equals(perStcd) && yr.equals(perYear)){
						map.put("AVQ", avq);
						map.put("MXQ", mxq);
						map.put("MXQDT", mxqdt!=null?subDatestr(mxqdt):null);
						map.put("MNQ", mnq);
						map.put("MNQDT", mnqdt);
						map.put("RW", rw);
						map.put("RM", rm);
						map.put("RD", rd);
					}
				}
				
				for(JSONObject obj:remarkList){
					String stcd = obj.containsKey("STCD")?obj.getString("STCD").toString():null;
					String yr = obj.containsKey("YR")?obj.getString("YR").toString():null;
					String nt = obj.containsKey("NT")?obj.getString("NT").toString():null;
					if(stcd.equals(perStcd) && yr.equals(perYear)){
						map.put("NT", nt);
					}
				}
				
				dataList.add(dataMap.get(entry.getKey()));
			}
		return dataList;
	
	}
	
	@Override
	public List<Map<String, Object>> waterLevelReport(String stcds, String beginYear, String endYear, String type) throws Exception {
		stcds="'00100100'";
		beginYear = "2007";
		endYear = "2017";
		List<Map<String,Object>> dailyList = ur.jdbcTemplate.queryForList("exec UP_Get_DZ_C_By_Stations ?,?,?",stcds,beginYear,endYear);
		List<Map<String,Object>> monthList = ur.jdbcTemplate.queryForList("exec UP_Get_MTZ_E_By_Stations ?,?,?",stcds,beginYear,endYear);
		List<Map<String,Object>> yearList = ur.jdbcTemplate.queryForList("exec UP_Get_YRZ_F_By_Stations ?,?,?",stcds,beginYear,endYear);
		List<Map<String,Object>> wfdzList = ur.jdbcTemplate.queryForList("exec UP_Get_YRZ_F_By_Stations ?,?,?",stcds,beginYear,endYear);//保证率水位
		List<JSONObject> remarkList = tbCommonService.queryDatasByTbName("HY_DAEX_I", "{'STCD_IN':'00100100','YR_DT':'2007','YR_LT':'2014','TBID_EQ':'HY_DZ_C'}");
		
		List<Map<String,Object>> dataList = waterLevelData(dailyList,monthList,yearList,wfdzList,remarkList,type);
		return dataList;
	}
	
	private List<Map<String, Object>> waterLevelData(List<Map<String, Object>> dailyList,
			List<Map<String, Object>> monthList, List<Map<String, Object>> yearList, List<Map<String, Object>> wfdzList,
			List<JSONObject> remarkList, String type) {
		List<Map<String,Object>> dataList = new ArrayList<Map<String, Object>>();
		Map<String,Map<String,Object>> tableMap = new HashMap<String, Map<String, Object>>();
		
		//日水位归位
		if(tool.collectionNotNull(dailyList)){
			for(Map<String,Object> dailyMap:dailyList){
				String stcd = dailyMap.containsKey("STCD")?dailyMap.get("STCD").toString():null;
				String dt = dailyMap.containsKey("DT")?dailyMap.get("DT").toString():null;
				String avz = dailyMap.containsKey("AVZ")?dailyMap.get("AVZ").toString():null;
				
				String year = dt.substring(0, 4);//年份
				String month = dt.substring(5,7);//月份
				String day = dt.substring(8, 10);//日期
				
				int m = Integer.parseInt(month);
				int d = Integer.parseInt(day);
				
				//单站多年
				if(type.equals("1")){
					if(tableMap.containsKey(year))
					{
						Map<String,Object> map = tableMap.get(year);
						if(map.containsKey("tableData"))
						{
							String[][] data = (String[][])map.get("tableData");
							data[d-1][m-1] = avz;
						}
						else
						{
							String[][] data = new String[36][12];
							data[d-1][m-1] = avz;
						}
					}
					else
					{
						String[][] data = new String[36][12];
						data[d-1][m-1] = avz;
						
						Map<String,Object> map = new HashMap<String,Object>();
						
						String STNM = dailyMap.containsKey("STNM")?dailyMap.get("STNM").toString():null;
						String RVNM = dailyMap.containsKey("RVNM")?dailyMap.get("RVNM").toString():null;
						
						map.put("STCD", stcd);
						map.put("YEAR", year);
						map.put("STNM", STNM);
						map.put("RVNM", RVNM);
						map.put("tableData", data);
						
						tableMap.put(year, map);
					}
				}
				else if(type.equals("2"))
				{
					//单年多站					
					if(tableMap.containsKey(stcd))
					{
						Map<String,Object> map = tableMap.get(stcd);
						if(map.containsKey("tableData"))
						{
							String[][] data = (String[][])map.get("tableData");
							data[d-1][m-1] = avz;
						}
						else
						{
							String[][] data = new String[36][12];
							data[d-1][m-1] = avz;
						}
					}
					else
					{
						String[][] data = new String[36][12];
						data[d-1][m-1] = avz;
						
						Map<String,Object> map = new HashMap<String,Object>();
						
						String STNM = dailyMap.containsKey("STNM")?dailyMap.get("STNM").toString():null;
						String RVNM = dailyMap.containsKey("RVNM")?dailyMap.get("RVNM").toString():null;
						
						map.put("STCD", stcd);
						map.put("YEAR", year);
						map.put("STNM", STNM);
						map.put("RVNM", RVNM);
						map.put("tableData", data);
						
						tableMap.put(stcd, map);
					}
					
				}
			}
		}
		
		for(Entry<String, Map<String, Object>> entry:tableMap.entrySet()){
			Map<String,Object> tmap = tableMap.get(entry.getKey());
			String stcd = tmap.get("STCD").toString();
			String year = tmap.get("YEAR").toString();
			String[][] tableData = (String[][]) tmap.get("tableData");
			//月水位归位
			for(Map<String,Object> map:monthList){
				String STCD = map.containsKey("STCD")?map.get("STCD").toString():null;
				String YR = map.containsKey("YR")?map.get("YR").toString():null;
				int MTH = map.containsKey("MTH")?Integer.parseInt(map.get("MTH").toString()):null;
				
				String AVZ =     map.containsKey("AVZ")?map.get("AVZ").toString():null;
				String HTZ =     map.containsKey("HTZ")?map.get("HTZ").toString():null;
				String HTZDT =   map.containsKey("HTZDT")?map.get("HTZDT").toString():null;
				String MNZ =     map.containsKey("MNZ")?map.get("MNZ").toString():null;
				String MNZDT =   map.containsKey("MNZDT")?map.get("MNZDT").toString():null;
				if(stcd.equals(STCD) && year.equals(YR)){
					tableData[31][MTH-1]=AVZ;
					tableData[32][MTH-1]=HTZ;
					tableData[33][MTH-1]=HTZDT;
					tableData[34][MTH-1]=MNZ;
					tableData[35][MTH-1]=MNZDT;
				}
			}
			
			for(Map<String,Object> map:yearList){
				String  STCD = map.containsKey("STCD")?map.get("STCD").toString():null;
				String  YR = map.containsKey("YR")?map.get("YR").toString():null;
				String  AVZ = map.containsKey("AVZ")?map.get("AVZ").toString():null;
				String  HTZ = map.containsKey("HTZ")?map.get("HTZ").toString():null;
				String  HTZDT = map.containsKey("HTZDT")?map.get("HTZDT").toString():null;
				String  MNZ = map.containsKey("MNZ")?map.get("MNZ").toString():null;
				String  MNZDT = map.containsKey("MNZDT")?map.get("MNZDT").toString():null;
				String  S1= map.containsKey("S1")?map.get("S1").toString():null;
				String  S15= map.containsKey("S15")?map.get("S15").toString():null;
				String  S30= map.containsKey("S30")?map.get("S30").toString():null;
				String  S90= map.containsKey("S90")?map.get("S90").toString():null;
				String  S180= map.containsKey("S180")?map.get("S180").toString():null;
				String  S270= map.containsKey("S270")?map.get("S270").toString():null;
				String  S365= map.containsKey("S365")?map.get("S365").toString():null;
				
				if(stcd.equals(STCD) && year.equals(YR)){
					tmap.put("HTZ", HTZ);
					tmap.put("HTZDT", HTZDT);
					tmap.put("MNZ", MNZ);
					tmap.put("MNZDT", MNZDT);
					tmap.put("AVZ", AVZ);
					
					tmap.put("S1", S1);
					tmap.put("S15", S15);
					tmap.put("S30", S30);
					tmap.put("S90", S90);
					tmap.put("S180", S180);
					tmap.put("S270", S270);
					tmap.put("S365", S365);
				}
			}
			
//			for(Map<String,Object> map:wfdzList){
//				String STCD  =map.containsKey("stcd")?map.get("stcd").toString():null;
//				String YR    =map.containsKey("YR")?map.get("YR").toString():null;
//				String stnm  =map.containsKey("stnm")?map.get("stnm").toString():null;
//				String RVNM  =map.containsKey("RVNM")?map.get("RVNM").toString():null;
//				String WF    =map.containsKey("WF")?map.get("WF").toString():null;
//				String RZ    =map.containsKey("RZ")?map.get("RZ").toString():null;
//				if(stcd.equals(STCD) && year.equals(YR)){
//					tmap.put("WFDZ"+WF, RZ);
//				}
//			}
			
			for(JSONObject obj:remarkList){
				String STCD = obj.containsKey("STCD")?obj.getString("STCD").toString():null;
				String YR = obj.containsKey("YR")?obj.getString("YR").toString():null;
				String nt = obj.containsKey("NT")?obj.getString("NT").toString():null;
				if(stcd.equals(STCD) && year.equals(YR)){
					tmap.put("NT", nt);
				}
			}
			
			dataList.add(tableMap.get(entry.getKey()));
		}
		return dataList;
	}

	private String subDatestr(String dateStr){
		if(StringUtils.isNotBlank(dateStr) && dateStr.length()>=10){
			int d1 = Integer.parseInt(dateStr.substring(5, 7));
			int d2 = Integer.parseInt(dateStr.substring(8, 10));
			return d1+"月"+d2+"日";
			
		}
		else
		{
			return dateStr;
		}
	}
	
	private String subDateStr1(String dateStr){
		if(StringUtils.isNotBlank(dateStr) && dateStr.length()>=10){
			int d2 = Integer.parseInt(dateStr.substring(8, 10));
			return d2+"";
		}
		return "";
	}

}