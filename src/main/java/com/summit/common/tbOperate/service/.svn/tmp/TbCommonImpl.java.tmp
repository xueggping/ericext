/**
 * 
 */
package com.summit.common.tbOperate.service;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
<<<<<<< .mine
import org.springframework.stereotype.Service;
=======
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
>>>>>>> .r101795

import com.summit.frame.repository.jdbc.UserRepository;
import com.summit.frame.util.Page;

import net.sf.json.JSONObject;

/**
 * @author Administrator
 *
 */
<<<<<<< .mine
@Service
public class TbCommonImpl implements TbCommonInter {
=======
@Service
@Transactional
public class TbCommonImpl{
>>>>>>> .r101795
	@Autowired
	private UserRepository repository;

	public List<JSONObject> queryColumnsProperties(String tableName) throws Exception {
		List<JSONObject> list=null;
		if(!StringUtils.isNotBlank(tableName)){
			throw new Exception("获取表字段属性：表名tableName为空");
		}else{
			StringBuffer buf = new StringBuffer();
			
			buf.append("select c.name as COLNAME,t.name as COLTYPE, \n");
			buf.append("convert(bit,c.IsNullable)  as COLISNULL, \n");
			buf.append("convert(bit,case when exists(select 1 from sysobjects where xtype='PK' and parent_obj=c.id and name in ( \n");
			buf.append("select name from sysindexes where indid in( \n");
			buf.append(" select indid from sysindexkeys where id = c.id and colid=c.colid))) then 1 else 0 end) as COLISKEY, \n");
			buf.append("convert(bit,COLUMNPROPERTY(c.id,c.name,'IsIdentity')) as COLINCREASE, \n");
			buf.append("c.Length as COLSIZE, \n"); 
			buf.append("COLUMNPROPERTY(c.id,c.name,'PRECISION') as COLLEN, \n");
			buf.append("isnull(COLUMNPROPERTY(c.id,c.name,'Scale'),0) as COLDECIMALNUM, \n");
			buf.append("ISNULL(CM.text,'') as COLDEFAULT,isnull(ETP.value,'') AS COLDESCRIPTION \n");
			buf.append("from syscolumns c \n");
			buf.append("inner join systypes t on c.xusertype = t.xusertype \n");
			buf.append("left join sys.extended_properties ETP on ETP.major_id = c.id and ETP.minor_id = c.colid and ETP.name='MS_Description' \n"); 
			buf.append("left join syscomments CM on c.cdefault=CM.id where 1=1 \n");
			buf.append("and c.id = object_id(?)");
			
System.out.println(buf.toString());
			list = repository.queryAllCustom(buf.toString(), tableName);
		}
		return list;
	}

	public List<JSONObject> queryKeys(String tableName) throws Exception {
		List<JSONObject> list=null;
		if(!StringUtils.isNotBlank(tableName)){
			throw new Exception("获取表主键：表名tableName为空");
		}else{
			StringBuffer buf = new StringBuffer();
			
			buf.append("SELECT a.name COLNAME FROM   syscolumns a inner  join sysobjects d on a.id=d.id \n"); 
			buf.append("where  d.name=? \n");
			buf.append("and exists(SELECT 1 FROM sysobjects where xtype='PK' and  parent_obj=a.id \n"); 
			buf.append("and name in (SELECT name  FROM sysindexes   WHERE indid in(SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid )))");
			
			list = repository.queryAllCustom(buf.toString(), tableName);
		}
		return list;
	}

	public int addTableData(String tableName, String paramer) {
		List<JSONObject> list;
		try {
		
			if(!StringUtils.isNotBlank(tableName))
			{
				throw new Exception("新增表数据接口：表名tableName为空");
			}
			
			if(!StringUtils.isNotBlank(paramer)){
				throw new Exception("新增表数据接口：参数paramer为空");
			}
			
			list = queryColumnsProperties(tableName);
			JSONObject json = JSONObject.fromObject(paramer);
			StringBuffer  buf = new StringBuffer();
			StringBuffer valueBuf = new StringBuffer();
			if(list!=null && list.size()!=0){
				buf.append("insert into ").append(tableName).append("(");
				valueBuf.append(" values(");
				int j=0;
				for(int i=0;i<list.size();i++){
					JSONObject obj = list.get(i);
					String colName = obj.getString("COLNAME");
					String colType = obj.getString("COLTYPE");
					if(json.containsKey(colName))
					{
						String colValue = json.getString(colName);
						if(j!=0)
						{
							buf.append(","+colName);
							valueBuf.append(","+colValue);
						}
						else
						{
							buf.append(colName);
							valueBuf.append(colValue);
						}
						j++;
					}
				}
				valueBuf.append(")");
				buf.append(")").append(valueBuf.toString());
				return repository.jdbcTemplate.update(buf.toString());
			}
		} catch (DataAccessException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 0;
	}

	public int editTableData(String tableName, String paramer) {
		try {
			List<JSONObject> keyList = queryKeys(tableName);
			List<JSONObject> proList = queryColumnsProperties(tableName);
			List<JSONObject> columnList = queryColumnsProperties(tableName);
			JSONObject json = JSONObject.fromObject(paramer);
			StringBuffer buf = new StringBuffer();
			int j=0;
			for(JSONObject obj:columnList)
			{
				buf.append("update ").append(tableName).append(" set ");
				String colName = obj.getString("COLNAME");
				if(json.containsKey(colName))
				{
					String colValue = obj.getString(colName);
					if(j!=0)
					{
						buf.append(","+colName+"='"+colValue+"'");
					}
					else
					{
						buf.append(colName+"='"+colValue+"'");
					}
				}
			}
			buf.append(" where 1=1 ");
			for(int k=0;k<keyList.size();k++)
			{
				JSONObject obj=keyList.get(k);
				String colName = obj.getString("COLNAME");
				if(json.containsKey(colName)){
					String colValue = json.getString(colName);
					buf.append(" and ").append(colName).append("='").append(colValue).append("'");
				}
			}
			repository.jdbcTemplate.execute(buf.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	public int deleteTableData(String tableName, String paramer) {
		StringBuffer buf = new StringBuffer();
		try {
			List<JSONObject> proList = queryColumnsProperties(tableName);
			buf.append("delete from ").append(tableName).append(" where 1=1 ");
			if(StringUtils.isNotBlank(paramer))
			{
				JSONObject parJson = JSONObject.fromObject(paramer);
				for(JSONObject obj:proList)
				{
					String colName = obj.getString("COLNAME");
					if(parJson.containsKey(colName))
					{
						String colValue = obj.getString(colName);
						buf.append(" and ").append(colName).append("='").append(colValue);
					}
				}
				return repository.jdbcTemplate.update(buf.toString());
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return 0;
	}
	
	public Page<JSONObject> queryPageDatasByTbName(String tableName, String paramer, int start,int limit) throws Exception {
		if(!StringUtils.isNotBlank(tableName))
		{
			throw new Exception("查询数据集合：表名tableName不能为空");
		}
		else
		{
			StringBuffer buf = new StringBuffer();
			buf.append("select * from ").append(tableName).append(" where 1=1 ");
			
			JSONObject parObj = JSONObject.fromObject(paramer);
			List<JSONObject> proList = queryColumnsProperties(tableName);
			for(JSONObject obj:proList)
			{
				String colName = obj.getString("COLNAME");
				if(proList.contains(colName))
				{
					String colValue = parObj.getString(colName);
					buf.append(" and ").append(colName).append("='").append(colValue).append("'");
				}
			}
			return repository.queryByCustomPage(buf.toString(), start, limit);
		}
		
	}

	public List<JSONObject> queryDatasByTbName(String tableName, String paramer) throws Exception {
		if(!StringUtils.isNotBlank(tableName))
		{
			throw new Exception("查询数据集合：表名tableName不能为空");
		}
		else
		{
			StringBuffer buf = new StringBuffer();
			buf.append("select * from ").append(tableName).append(" where 1=1 ");
			
			JSONObject parObj = JSONObject.fromObject(paramer);
			List<JSONObject> proList = queryColumnsProperties(tableName);
			for(JSONObject obj:proList)
			{
				String colName = obj.getString("COLNAME");
				if(proList.contains(colName))
				{
					String colValue = parObj.getString(colName);
					buf.append(" and ").append(colName).append("='").append(colValue).append("'");
				}
			}
			return repository.queryAllCustom(buf.toString());
		}
	}

	public List<JSONObject> queryDatasBySQL(String sql, String paramer) {
		StringBuffer buf = new StringBuffer();
		buf.append("select * from (").append(sql).append(") where 1=1 ");
		
		JSONObject parJson = JSONObject.fromObject(paramer);
		Iterator it = parJson.keys();
		while(it.hasNext())
		{
			String key = (String) it.next();
			String colValue = parJson.getString(key);
			buf.append(" and ").append(key).append("='").append(colValue).append("'");
		}
		return repository.queryAllCustom(buf.toString());
	}


	public Page<JSONObject> queryPageDatasBySQL(String sql, String paramer, int start, int limit) {
		StringBuffer buf = new StringBuffer();
		buf.append("select * from (").append(sql).append(") where 1=1 ");
		
		JSONObject parJson = JSONObject.fromObject(paramer);
		Iterator it = parJson.keys();
		while(it.hasNext())
		{
			String key = (String) it.next();
			String colValue = parJson.getString(key);
			buf.append(" and ").append(key).append("='").append(colValue).append("'");
		}
		return repository.queryByCustomPage(buf.toString(), start, limit);
	}

}